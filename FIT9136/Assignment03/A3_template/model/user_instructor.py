from model.user import User
from lib.helper import course_json_files_path,user_data_path,figure_save_path


import os
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


class Instructor(User):
    """
    3.2.3 Instructor class
    1. constructor. This method has 9 positional arguments:
    uid(int, default value is -1),username(str, default value is “”),
    password(str, default value is “”),
    register_time(str, default value is “yyyy-MM-dd_HH:mm:ss.SSS”),
    role(str,default value is “instructor”), email(str, default value is “”),
    display_name(str,default value is “”), job_title(str, default value is “”)
    and course_id_list(list,default value is []).
    """

    def __init__(self, uid=-1, username="", password="", register_time="yyyy-MM-dd_HH:mm:ss.SSS",
                 role="", email="", display_name="", job_title="", course_id_list=[]):
        User.__init__(self, uid, username, password, register_time, role)
        self.email = email
        self.display_name = display_name
        self.job_title = job_title
        self.course_id_list = course_id_list

    """
    2. __str__()->str.
    Return string format example:
    Example 1 (registered manually, so display_name=””, job_title=””,
    course_id_list=[]):
    """

    def __str__(self):
        text = ';;;'.join([self.uid, self.username, self.password, self.register_time,
                           self.role, self.email, self.display_name, self.job_title,
                           self.course_id_list])
        return text

    """
    3. get_instructors() no return.     This method will extract instructor information 
    from the given course data  files. Similar to the process of retrieving course data, 
    but this method focuses on the instructor data of each course. In each course item, 
    there could be multiple instructors.There is no need to perform registration validation for
    each instructor’s info in this method. All the null value in json str should be
    saved as None or string “null”. All the empty string value “” should be saved as
    same empty string “”.
    After retrieving the required data, you need to write the info into user.txt file
    to save all the instructor data. Each attribute needs to be separated by “;;;”.
    The required attributes and data format is:
    “{instructor_id};;;{username};;;{password};;;{register_time};;;{role};;;{email}
    ;;;{instructor_display_name};;;{instructor_job_title};;;{course_id_list}”. 
    The username is generated by converting the display name to lowercase and
    replacing the whitespace to underscore. The password uses the instructor_id
    value directly. The email address is generated by combining the username and
    the “@gmail.com”. All the course ids in the course_id_list will be connected to
    using two “-” marks. The format is “course_id--course_id--course_id”. If an
    instructor is already in the user.txt file, only update the course_id_list which
    saves the course this instructor teaches. The register_time uses the default
    value.
    The auto-generated instructor accounts are different from the manually
    registered instructor account. Manually registered instructor accounts do not
    have any course_id_list. And, the display name and job title are empty.
    However, these accounts should have the same format in user.txt as the
    auto-generated accounts. For example:
    863133505;;;brooks_davila;;;&&85&&&&65&&&&35&&&&15&&&&35&&&&35&&&&55&&&&5&&&&55&&;;;
    xxxx-xx-xx_xx:xx:xx.xxx;;;instructor;;;brooks_davila@udemy.com;;;Brooks Davila;;;Management trainer
    ;;;39385047--112007285--582468331--204107886--970798161--798836200--662704084--378659188
    """

    def get_instructors(self):
        instructor_dict = {}
        # get category path
        category_path = '.' + course_json_files_path
        for category in os.listdir(category_path):
            if not category.startswith('.'):
                # get subcategory_path
                subcategory_path = category_path + '/' + category
                for subcategory in os.listdir(subcategory_path):
                    if not subcategory.startswith('.'):
                        # get json path
                        js_path = subcategory_path + '/' + subcategory
                        for js_file in os.listdir(js_path):
                            # read json
                            file_path = js_path + '/' + js_file

                            # write json data into instructor_dict
                            with open(file_path, encoding='utf-8') as json_file:
                                js_data = json.load(json_file)
                                for unit in js_data.values():
                                    for item in unit['items']:
                                        for instructor in item['visible_instructors']:
                                            instructor_id = str(instructor['id'])

                                            # check if it is new instructor
                                            if instructor_id not in instructor_dict:
                                                instructor_display_name = instructor['display_name']

                                                # The username is generated by converting the display name to lowercase and
                                                # replacing the whitespace to underscore.
                                                username = instructor_display_name.lower().replace(' ', '_')

                                                # The password uses the instructor_id value directly.
                                                password = User().encrypt_password(instructor_id)

                                                # The register_time uses the default value.
                                                register_time = "yyyy-MM-dd_HH:mm:ss.SSS"
                                                role = "instructor"

                                                # The email address is generated by combining the username
                                                # and the “@gmail.com”
                                                email = username + "@gmail.com"
                                                instructor_job_title = instructor['job_title']
                                                if (instructor_job_title is None) or (instructor_job_title == ""):
                                                    instructor_job_title = "null"

                                                # All the course ids in the course_id_list will be connected to
                                                # using two “-” marks. The format is
                                                # “course_id--course_id--course_id”. If an instructor is already in
                                                # the user.txt file, only update the course_id_list which
                                                # saves the course this instructor teachers
                                                course_id_list = [item['id']]

                                                # “{instructor_id};;;{username};;;{password};;;{register_time};;;{role};;;{email}
                                                #     ;;;{instructor_display_name};;;{instructor_job_title};;;{course_id_list}”.
                                                instructor_dict[instructor_id] = [username, password, register_time,
                                                                                  role, email,
                                                                                  instructor_display_name,
                                                                                  instructor_job_title,
                                                                                  course_id_list]
                                            else:
                                                course_id_list = [item['id']]
                                                if course_id_list not in instructor_dict[instructor_id][-1]:
                                                    instructor_dict[instructor_id][-1].append(course_id_list)
        # write instructor data into temp_ins.txt file
        # with open(user_data_path, "a", encoding='utf-8') as json_file:
        with open("data/temp_ins.txt", "w+", encoding='utf-8') as json_file:
            for key, value in instructor_dict.items():
                value[-1] = [str(course) for course in value[-1]]
                value[-1] = '-'.join(value[-1])
                a = value[-1].replace("[", "")
                b = a.replace("]", "")
                value[-1] = b
                test = key + ';;;' + ';;;'.join(value)
                json_file.write(test + '\n')
        User().txt_merge()

    """
    4. get_instructors_by_page()->tuple     One positional argument: page. 
    This method reads the user.txt file to retrieve all the instructor information. 
    With all the instructor information and the current page number, a list of 
    Instructor objects and the total pages will be generated. Each page has at 
    most 20 instructors. A tuple contains the list of instructors, total page 
    number and the total number of instructors will be returned.
    """

    def get_instructors_by_page(self, page):
        instructor_obj_list = []
        with open("data/temp_ins.txt", encoding='utf-8') as instructor_file:
            instructor_list = [line.strip().split(';;;') for line in instructor_file.readlines()]
        total_page = int(len(instructor_list) / 20)

        # uid=-1, username="", password="", register_time="yyyy-MM-dd_HH:mm:ss.SSS",
        #    role="", email="", display_name="", job_title="", course_id_list=[]
        for line in instructor_list:
            instructor_obj_list.append(Instructor(int(line[0]),line[1],line[2],line[3],
                                                  line[4],line[5],line[6],line[7],[line[8]],))

        if page < total_page:
            instructor_content = instructor_obj_list[(page - 1) * 20:page * 20]
        else:
            instructor_content = instructor_obj_list[(page - 1) * 20:]
        return (instructor_content, total_page, len(instructor_list))

    """
    5. generate_instructor_figure1()->str   Generate a graph that shows the top 
    10 instructors who teach the most courses.(any chart)
    In all the graphs, if the instructor display name is too long, you need to extract
    the first 3 words. The generate_instructor_figure1() method is required to
    return a string explanation about your understanding of this figure. All the
    graphs use the instructor title, course title, category title or subcategory title
    as x-axis labels."All the graphs use the instructor title, course title, category title 
    or subcategory title as x-axis labels." means if the graph need to show some info about 
    instructor, course and subcategory, we use id as the unique identifier but need to 
    show the title(name) in x-axis.
    """

    def generate_instructor_figure1(self):
        instructor_display = {}
        instructor_content = []
        with open("data/temp_ins.txt", encoding='utf-8') as instructor_file:
            for line in instructor_file:
                line = line.strip().split(";;;")
                line[-1] = line[-1].split("-")

                # if the instructor display name is too long,
                # you need to extract the first 3 words
                if len(line[6].split(" ")) > 3:
                    line[6] = " ".join(line[6].split()[:3])
                instructor_content.append(line)
                # instructor_display[line[6]] = len(line[-1])

        # “{instructor_id};;;{username};;;{password};;;{register_time};;;{role};;;{email}
        #     ;;;{instructor_display_name};;;{instructor_job_title};;;{course_id_list}”.
        instructor_display['display_name'] = [line[6] for line in instructor_content]
        instructor_display['course_total'] = [len(line[-1]) for line in instructor_content]
        instructor_graph = pd.DataFrame(instructor_display)
        instructor_graph = instructor_graph.sort_values(by='course_total', ascending=False).head(10)
        # print(instructor_graph)

        x = instructor_graph['display_name']
        y = instructor_graph['course_total']

        # using Bar() to plot line chart
        fig, ax = plt.subplots(figsize=(20,10))
        plot = ax.bar(x, y)
        # using xlabel, ylabel, and title to set the labels for the chart
        ax.set_xlabel("Instructor name")
        ax.set_ylabel("Teaching courses number")
        ax.set_title("Top 10 instructors who teach the most courses")
        ax.bar_label(plot, padding=3)

        # save pictures
        plt.savefig(figure_save_path + 'instructor_figure1.png')
        # using show function to show the plot the graph
        # plt.show()

        # return a string explanation about your understanding of this figure.
        text = "Jude coffey teaches the most courses that is 30 courses"
        return text
